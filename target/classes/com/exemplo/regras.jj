options {
    STATIC = false;
}
PARSER_BEGIN(prataLang)
import java.io.*;
public class prataLang {

  final static String Version = "PrataLang Compiler - Version 1.0 - 2024";
  boolean Menosshort = false;

  public static void main(String[] args) throws ParcerException {
    String filename= ""; // nome do arquivo a ser analizado
    prataLang parser;
    int i;
    boolean ms = false;

    System.out.println(Version);

    // le os parametros passados para o compilador
    for(int i = 0; i < args.length; i++) {
      if ( args[i].toLowerCase().equals("-short") ) ms = true;
      else{
        System.out.println("Usage is: java PrataLang [-short] inputfile");
        Syste.exit(0);
      }
    }

    if (args[i].equals("-")){
      // le entrada padrão
       System.out.println(" Reading from standard input . . . ");
       parser = new prataLang(System.in);
    } else {
      // le do arquivo
      filename = args[args.length-1];
      System.out.println("Readig from file " + filename + " . . . ");
      try{
        parcer = new prataLang(new java.io.FileInputStream(filename));
      } catch (java.io.FileNotFoundException e ) {
        System.out.println("File "+filename+ " NOT FOUND");
        return;
      }
    }
    parser.Menosshort = ms;
    parser.program(); //chama o metodo que faz a analise

    // verifica se houver erro lexico
    if (parcer.token_source.foundLexError() != 0)
      System.out.println(
        parser.token_source.foundLexError() + " Erro Lexico encontrado!! "
      );
    else System.out.println(" Program successfully analized ");




   // Inicialização do Analisador Léxico
//   AnalisadorLexico parser = new AnalisadorLexico(System.in);
//   try {
//     parser.Input();
//     System.out.println("Análise concluída sem erros.");
//   } catch (ParseException e) {
//     System.err.println("Erro de análise: " + e.getMessage());
//   }
  } //main

  //metodo auxiliar
  static public String im(int x) {
    int  k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try{
      s=s.substring(1,k);
    }
    catch (StringIndexOutOfBoundsException e ){ }
    return s;
}

PARSER_END(prataLang)

TOKEN_MGR_DECLS : {
    int countLexError = 0;

    public int foundLexError(){
        return countLexError;

    }
}

SKIP : {
    " " | "\t" | "\n" | "\r"| "\f"  // Ignora espaços em branco e quebras de linha
}

// Definição de Comentários de Linha e Bloco
//SKIP : {
//    "//" ~[\r\n]* ("\r" | "\n" | "\r\n") |
//    "/*" (~["*"])* "*"+ (~["/"] (~["*"])* "*"+)* "/"
//}

// Definição de Tokens para a Linguagem

/*

* VER O LIVRO NA PARTE DOS TOKENS -> NÃO SEI A PAGINA , TA GRIFADO ALI
SEPARAR ESSE TODO AQUI

COLOCAR TOKEM:
    -> PALAVRAS RESERVADAS
    -> OPERADORES
    -> SIMBULOS ESPECIAIS
    -> CONSTANTES
    -> IDENTIFICADORES



TOKEN : {
    < IDENTIFIER: (["a"-"z", "A"-"Z"])(["a"-"z", "A"-"Z", "0"-"9", "_"])* > |
    < INTEGER: (["0"-"9"])+ > |
    < FLOAT: (["0"-"9"])+ "." (["0"-"9"])+ > |
    < STRING_LITERAL: "\"" (~["\""])* "\"" > |
    < KEYWORD_MAKE: "make" > |
    < KEYWORD_END: "end" > |
    < KEYWORD_CONST: "const" > |
    < KEYWORD_VAR: "var" > |
    < OPERATOR_PLUS: "+" > |
    < OPERATOR_MINUS: "-" > |
    < OPERATOR_MULT: "*" > |
    < OPERATOR_DIV: "/" > |
    < OPERATOR_POW: "**" > |
    < OPERATOR_MOD: "%" > |
    < OPERATOR_MOD_INT: "%%" > |
    < OPERATOR_EQ: "=" > |
    < OPERATOR_NEQ: "<>" > |
    < OPERATOR_LT: "<" > |
    < OPERATOR_GT: ">" > |
    < OPERATOR_LE: "<=" > |
    < OPERATOR_GE: ">=" > |
    < LOGICAL_AND: "&" > |
    < LOGICAL_OR: "|" > |
    < LOGICAL_NOT: "!" >
}*/

// PALAVRAS RESERVADAS
//TOKEN : {}

// OPERADORES
//TOKEN : {}

// SIMBULOS ESPECIAIS
//TOKEN : {}

// CONSTANTES
//TOKEN : {}

// IDENTIFICADORES
//TOKEN : {}

// Produções de Entrada para Iniciar a Análise
void Input() : {} {
    (Token())*
}

void Token() : {} {
    < IDENTIFIER > | < INTEGER > | < FLOAT > | < STRING_LITERAL > | < KEYWORD_MAKE > |
    < KEYWORD_END > | < KEYWORD_CONST > | < KEYWORD_VAR > | < OPERATOR_PLUS > |
    < OPERATOR_MINUS > | < OPERATOR_MULT > | < OPERATOR_DIV > | < OPERATOR_POW > |
    < OPERATOR_MOD > | < OPERATOR_MOD_INT > | < OPERATOR_EQ > | < OPERATOR_NEQ > |
    < OPERATOR_LT > | < OPERATOR_GT > | < OPERATOR_LE > | < OPERATOR_GE > |
    < LOGICAL_AND > | < LOGICAL_OR > | < LOGICAL_NOT >
}
